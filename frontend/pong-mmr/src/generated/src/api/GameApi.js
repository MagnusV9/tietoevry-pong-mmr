/*
 * tietoevry-pong-mmr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.58
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Game from '../model/Game';

/**
* Game service.
* @module api/GameApi
* @version 0.1
*/
export default class GameApi {

    /**
    * Constructs a new GameApi. 
    * @alias module:api/GameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiGamesGet operation.
     * @callback moduleapi/GameApi~apiGamesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Game>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all games
     * Get all games
     * @param {module:api/GameApi~apiGamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiGamesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Game];

      return this.apiClient.callApi(
        '/api/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiGamesIdDelete operation.
     * @callback moduleapi/GameApi~apiGamesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an game by ID
     * Delete an game by its ID
     * @param {Number} id Game ID
     * @param {module:api/GameApi~apiGamesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiGamesIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiGamesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/games/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiGamesIdGet operation.
     * @callback moduleapi/GameApi~apiGamesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Game{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an game by ID
     * Get an game by its ID
     * @param {Number} id Game ID
     * @param {module:api/GameApi~apiGamesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiGamesIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiGamesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Game;

      return this.apiClient.callApi(
        '/api/games/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiGamesPost operation.
     * @callback moduleapi/GameApi~apiGamesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Game{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new game
     * Create a new game
     * @param {module:model/Game} body Game object
     * @param {module:api/GameApi~apiGamesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiGamesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiGamesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Game;

      return this.apiClient.callApi(
        '/api/games', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}