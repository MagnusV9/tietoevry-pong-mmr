/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * tietoevry-pong-mmr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Employee account information
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    department: string;
    /**
     * 
     * @type {number}
     * @memberof Employee
     */
    elo: number;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    password: string;
}
/**
 * Game information between an employee and an user
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    employee1ID: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    employee1Score: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    employee2ID: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    employee2Score: number;
}
/**
 * Login request with email and password
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * UpdateEmployee account information
 * @export
 * @interface UpdateEmployee
 */
export interface UpdateEmployee {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    department?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateEmployee
     */
    elo?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEmployee
     */
    password?: string;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Authenticates a user and returns a JWT token
         * @summary Login
         * @param {LoginRequest} body Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost(body: LoginRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiLoginPost.');
            }
            const localVarPath = `/api/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Authenticates a user and returns a JWT token
         * @summary Login
         * @param {LoginRequest} body Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost(body: LoginRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiLoginPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Authenticates a user and returns a JWT token
         * @summary Login
         * @param {LoginRequest} body Login Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginPost(body: LoginRequest, options?: any) {
            return AuthApiFp(configuration).apiLoginPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Authenticates a user and returns a JWT token
     * @summary Login
     * @param {LoginRequest} body Login Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiLoginPost(body: LoginRequest, options?: any) {
        return AuthApiFp(this.configuration).apiLoginPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * EmployeeApi - fetch parameter creator
 * @export
 */
export const EmployeeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all employees
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/employees`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an employee by its ID
         * @summary Delete an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdDelete(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployeesIdDelete.');
            }
            const localVarPath = `/api/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee by its ID
         * @summary Get an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployeesIdGet.');
            }
            const localVarPath = `/api/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing employee by its ID
         * @summary Update an existing employee
         * @param {UpdateEmployee} body UpdateEmployee object
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdPut(body: UpdateEmployee, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiEmployeesIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiEmployeesIdPut.');
            }
            const localVarPath = `/api/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateEmployee" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new employee
         * @summary Create a new employee
         * @param {Employee} body Employee object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesPost(body: Employee, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiEmployeesPost.');
            }
            const localVarPath = `/api/employees`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Employee" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all employees
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Employee>> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an employee by its ID
         * @summary Delete an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesIdDelete(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an employee by its ID
         * @summary Get an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Employee> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesIdGet(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an existing employee by its ID
         * @summary Update an existing employee
         * @param {UpdateEmployee} body UpdateEmployee object
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdPut(body: UpdateEmployee, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesIdPut(body, id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new employee
         * @summary Create a new employee
         * @param {Employee} body Employee object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesPost(body: Employee, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Employee> {
            const localVarFetchArgs = EmployeeApiFetchParamCreator(configuration).apiEmployeesPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all employees
         * @summary Get all employees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesGet(options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesGet(options)(fetch, basePath);
        },
        /**
         * Delete an employee by its ID
         * @summary Delete an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdDelete(id: number, options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesIdDelete(id, options)(fetch, basePath);
        },
        /**
         * Get an employee by its ID
         * @summary Get an employee by ID
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdGet(id: number, options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesIdGet(id, options)(fetch, basePath);
        },
        /**
         * Update an existing employee by its ID
         * @summary Update an existing employee
         * @param {UpdateEmployee} body UpdateEmployee object
         * @param {number} id Employee ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesIdPut(body: UpdateEmployee, id: number, options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesIdPut(body, id, options)(fetch, basePath);
        },
        /**
         * Create a new employee
         * @summary Create a new employee
         * @param {Employee} body Employee object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEmployeesPost(body: Employee, options?: any) {
            return EmployeeApiFp(configuration).apiEmployeesPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * Get all employees
     * @summary Get all employees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesGet(options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesGet(options)(this.fetch, this.basePath);
    }

    /**
     * Delete an employee by its ID
     * @summary Delete an employee by ID
     * @param {number} id Employee ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesIdDelete(id: number, options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get an employee by its ID
     * @summary Get an employee by ID
     * @param {number} id Employee ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesIdGet(id: number, options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Update an existing employee by its ID
     * @summary Update an existing employee
     * @param {UpdateEmployee} body UpdateEmployee object
     * @param {number} id Employee ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesIdPut(body: UpdateEmployee, id: number, options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesIdPut(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new employee
     * @summary Create a new employee
     * @param {Employee} body Employee object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public apiEmployeesPost(body: Employee, options?: any) {
        return EmployeeApiFp(this.configuration).apiEmployeesPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * GameApi - fetch parameter creator
 * @export
 */
export const GameApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all games
         * @summary Get all games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/games`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an game by its ID
         * @summary Delete an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdDelete(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiGamesIdDelete.');
            }
            const localVarPath = `/api/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an game by its ID
         * @summary Get an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiGamesIdGet.');
            }
            const localVarPath = `/api/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new game
         * @summary Create a new game
         * @param {Game} body Game object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesPost(body: Game, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling apiGamesPost.');
            }
            const localVarPath = `/api/games`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Game" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all games
         * @summary Get all games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Game>> {
            const localVarFetchArgs = GameApiFetchParamCreator(configuration).apiGamesGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an game by its ID
         * @summary Delete an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdDelete(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = GameApiFetchParamCreator(configuration).apiGamesIdDelete(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get an game by its ID
         * @summary Get an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Game> {
            const localVarFetchArgs = GameApiFetchParamCreator(configuration).apiGamesIdGet(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new game
         * @summary Create a new game
         * @param {Game} body Game object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesPost(body: Game, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Game> {
            const localVarFetchArgs = GameApiFetchParamCreator(configuration).apiGamesPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get all games
         * @summary Get all games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesGet(options?: any) {
            return GameApiFp(configuration).apiGamesGet(options)(fetch, basePath);
        },
        /**
         * Delete an game by its ID
         * @summary Delete an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdDelete(id: number, options?: any) {
            return GameApiFp(configuration).apiGamesIdDelete(id, options)(fetch, basePath);
        },
        /**
         * Get an game by its ID
         * @summary Get an game by ID
         * @param {number} id Game ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesIdGet(id: number, options?: any) {
            return GameApiFp(configuration).apiGamesIdGet(id, options)(fetch, basePath);
        },
        /**
         * Create a new game
         * @summary Create a new game
         * @param {Game} body Game object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGamesPost(body: Game, options?: any) {
            return GameApiFp(configuration).apiGamesPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * Get all games
     * @summary Get all games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGamesGet(options?: any) {
        return GameApiFp(this.configuration).apiGamesGet(options)(this.fetch, this.basePath);
    }

    /**
     * Delete an game by its ID
     * @summary Delete an game by ID
     * @param {number} id Game ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGamesIdDelete(id: number, options?: any) {
        return GameApiFp(this.configuration).apiGamesIdDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * Get an game by its ID
     * @summary Get an game by ID
     * @param {number} id Game ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGamesIdGet(id: number, options?: any) {
        return GameApiFp(this.configuration).apiGamesIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     * Create a new game
     * @summary Create a new game
     * @param {Game} body Game object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGamesPost(body: Game, options?: any) {
        return GameApiFp(this.configuration).apiGamesPost(body, options)(this.fetch, this.basePath);
    }

}
