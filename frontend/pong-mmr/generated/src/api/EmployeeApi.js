/*
 * tietoevry-pong-mmr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Employee from '../model/Employee';
import UpdateEmployee from '../model/UpdateEmployee';

/**
* Employee service.
* @module api/EmployeeApi
* @version 0.1
*/
export default class EmployeeApi {

    /**
    * Constructs a new EmployeeApi. 
    * @alias module:api/EmployeeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiEmployeesGet operation.
     * @callback moduleapi/EmployeeApi~apiEmployeesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Employee>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all employees
     * Get all employees
     * @param {module:api/EmployeeApi~apiEmployeesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiEmployeesGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Employee];

      return this.apiClient.callApi(
        '/api/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiEmployeesIdDelete operation.
     * @callback moduleapi/EmployeeApi~apiEmployeesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an employee by ID
     * Delete an employee by its ID
     * @param {Number} id Employee ID
     * @param {module:api/EmployeeApi~apiEmployeesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmployeesIdDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiEmployeesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/employees/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiEmployeesIdGet operation.
     * @callback moduleapi/EmployeeApi~apiEmployeesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an employee by ID
     * Get an employee by its ID
     * @param {Number} id Employee ID
     * @param {module:api/EmployeeApi~apiEmployeesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiEmployeesIdGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiEmployeesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;

      return this.apiClient.callApi(
        '/api/employees/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiEmployeesIdPut operation.
     * @callback moduleapi/EmployeeApi~apiEmployeesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing employee
     * Update an existing employee by its ID
     * @param {module:model/UpdateEmployee} body UpdateEmployee object
     * @param {Number} id Employee ID
     * @param {module:api/EmployeeApi~apiEmployeesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmployeesIdPut(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiEmployeesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiEmployeesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/employees/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiEmployeesPost operation.
     * @callback moduleapi/EmployeeApi~apiEmployeesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new employee
     * Create a new employee
     * @param {module:model/Employee} body Employee object
     * @param {module:api/EmployeeApi~apiEmployeesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    apiEmployeesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiEmployeesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = Employee;

      return this.apiClient.callApi(
        '/api/employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}